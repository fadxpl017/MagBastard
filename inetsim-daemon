#! /bin/sh
### BEGIN INIT INFO
# Provides:          inetsim Internet Simulation
# Required-Start:    $local_fs $remote_fs $syslog $network $time
# Required-Stop:     $local_fs $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stop the internet simulation
# Description:       inetsim is a software suite for simulating common internet services
### END INIT INFO

# Author: Matthias Eckert <me@inetsim.org>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Internet Service Simulation Suite"
NAME=inetsim
DAEMON=/usr/bin/inetsim
DAEMON_ARGS="--pidfile=$2 --config=$3"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
ENABLED=1
# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
#[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

if [ ! x"$ENABLED" = x"1" -a ! "$1" = "stop" ]; then
    log_warning_msg "Edit /etc/default/inetsim to start inetsim"
    exit 0
fi
echo "$DAEMON_ARGS" #| grep -c '\-\-pidfile'
if [ `echo "$DAEMON_ARGS" | grep -c '\-\-pidfile'` -ne 0 ] && [ ! -f $PIDFILE ]; then
    echo $DAEMON_ARGS
    PIDFILE=`echo "$DAEMON_ARGS" | sed s/=/\ /g | awk -F'--pidfile ' '{print $2}' | cut -d' ' -f1 | cut -f1`
fi

echo $PIDFILE
#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	[ ! -f $PIDFILE ] || return 1
	if [ x"$AUTO_CONF" = x"1" -a -x "/usr/share/inetsim/contrib/gen_config.pl" ]; then
	    /usr/share/inetsim/contrib/gen_config.pl
	fi
	#start-stop-daemon --start --background --quiet --pidfile $PIDFILE --exec $DAEMON -- \
	start-stop-daemon --start --background --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
		#|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
	sleep 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	[ -f $PIDFILE ] || return 1
	start-stop-daemon --stop  --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	echo "second time"
	sleep 1
	start-stop-daemon --stop --oknodo --retry=0/30/KILL/5 --pidfile $PIDFILE
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	#rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
#do_reload() {
#        #
#        # If the daemon can reload its configuration without
#        # restarting (for example, when it is sent a SIGHUP),
#        # then implement that here.
#        #
#        start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
#        return 0
#}

case "$1" in
  start)
	log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 1
	;;
esac

:
